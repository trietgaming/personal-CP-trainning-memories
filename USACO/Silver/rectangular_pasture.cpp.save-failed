#include <bits/stdc++.h>

using namespace std;

const string FNAME = "recpas";
const int MAXN = 2501;

struct Point {
  int x, y;
};

bool cmpByX(Point &a, Point &b) {
  return a.x < b.x;
}

bool cmpByY(Point &a, Point &b) {
  if (a.y == b.y) return a.x < b.x;
  return a.y < b.y;
}

long long recCount[MAXN][MAXN];
Point arr[MAXN];

int main() {

  freopen((FNAME + ".in").c_str(), "r", stdin);
//  freopen((FNAME + ".out").c_str(), "w", stdout);

  int n;
  cin >> n;

  for (int i = 0; i < n; ++i) {
    cin >> arr[i].x >> arr[i].y;
  }

  sort(arr, arr + n, sortByX);
  for (int i = 1; i <= n; ++i) {
    arr[i-1].x = i;
  }

  sort(arr, arr + n, sortByY);
  for (int i = 1; i <= n; ++i) {
    arr[i-1].y = i;
  }

  for (int i = 0; i < n; ++i) recCount[arr[i].y][arr[i].x] = 1;

  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      recCount[i][j] += recCount[i-1][j] + recCount[i][j-1] - recCount[i-1][j-1];
    }
  }

  long long res = 0;

  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
        res += (recCount[arr[i].y][arr[j].x] - recCount[arr[i].y][arr[i].x - 1]) * (recCount[n][arr[j].x] - recCount[n][arr[i].x-1]);
    }
  }

  cout << res + n + 1;

  return 0;
}

